'***** Designed for a PIC16F887 and built using MeLabs Pic Basic Pro v2.50 *****
'*
'* Version 1.0
'* 
'* Changelog:
'* Apr 15, 2010       v0.1        Original Release
'* May 10, 2010       v0.2        Misc tweaks
'* Jun 15, 2010       v0.3        Updated to run on new hardware
'* Aug 20, 2010       v1.0        Fixed menus to display in the correct units
'* Oct 03, 2010       v1.1        Updated to run on a 16F887
'*
'*******************************************************************************


@ device pic16F887, INTRC_OSC_NOCLKOUT, MCLR_OFF 

' Inputs
sw_scroll       var     PORTA.2
sw_increase     var     PORTA.3
sw_decrease		var		PORTA.4
sw_select       var     PORTA.5
sw_manauto      var     PORTD.5
eastLimit       VAR     PORTD.4
westLimit       var     PORTC.7

' Outputs
lcdBacklight	var		PORTB.5
pumpRelay       VAR     PORTC.2
eastSol         var     PORTC.1
westSol         VAR     PORTC.0

' How much differenece in sensor values is tolerated before we re-align
MAX_DELTA		CON		30

' Variable declarations
lcdON			var 	byte
trackMode       VAR     BYTE
ledValue        var     word
ledValue1       VAR     WORD
ledValue2       VAR     WORD
centerVal       var     word
offset          var     word
pumptime        var     byte
estwstval       var     word
limcnt          var     word
menuItem        var     byte
nightDelay      var     word
trackUpdate     var     word
timeCnt         var     word
tmp             VAR     WORD
centerTime      VAR     BYTE
eveningDelay    VAR     WORD

'Set the TRIS registers.  0 = output, 1 = input
TRISA = %00111111
TRISB = %00000000
TRISC = %10000000
TRISD = %00110000
OSCCON = %01100000

'Set AN13 - AN2 pins as digital inputs
'ADCON1 = ADCON1 | %00001101
ANSEL = %11100011

'Make sure all the outputs are off to begin with
PORTC = %00000000

' Set LCD Data port
DEFINE LCD_DREG	PORTB
' Set starting Data bit (0 or 4) if 4-bit bus
DEFINE LCD_DBIT	0
' Set LCD Register Select port
DEFINE LCD_RSREG	PORTD
' Set LCD Register Select bit
DEFINE LCD_RSBIT	7
' Set LCD Enable port
DEFINE LCD_EREG	PORTD
' Set LCD Enable bit
DEFINE LCD_EBIT	6
' Set LCD bus size (4 or 8 bits)
DEFINE LCD_BITS	4
' Set number of lines on LCD
DEFINE LCD_LINES	2
' Set command delay time in us
DEFINE LCD_COMMANDUS	2000
' Set data delay time in us
DEFINE LCD_DATAUS	50

' Define the ADC parameters
Define	ADC_BITS		10	' Set number of bits in result
Define	ADC_CLOCK		3	' Set clock source (3=RC)
Define	ADC_SAMPLEUS	200	' Set sampling time in uS

' Right-justify the ADC value
ADCON1.7 = 1


lcdON = 0
trackMode = 0       ' Default to auto day-track
trackupdate = 1600  ' Default to updating the track every half hour
centerval = 450     ' 496 all the way west
                    ' 763 all to the east
offset = 0
eveningdelay = 3600
nightdelay = 28800
centerTime = 10
timecnt = 0

' Initialize the EEPROM values at compile time
EEPROM 0,[194]      ' centerPos low
EEPROM 1,[1]        ' centerPos high
EEPROM 2,[14]       ' centerTime
EEPROM 3,[128]      ' nightDelay low
EEPROM 4,[112]      ' nightDelay high
EEPROM 5,[64]       ' trackUpdate low
EEPROM 6,[6]        ' trackupdate high

' Give everything a bit to stabilize
Pause 500


main:
    ' Initialize the low-pass filter
    ADCin 0, ledvalue
    'adcin 0, ledvalue1
    'adcin 0, ledvalue2
    
	while(1)
		Pause 95
		if(sw_scroll) Then
			while(sw_scroll)
				' Wait until we let off the button
			wend
			GoSub menu
			menuItem = 0
		endif
		
		if(sw_manauto) then
            gosub mancontrol
        endif
        
        if(sw_select) then
            gosub track
            timecnt = 0
        endif
		
		' Handle LCD backlight auto shut-off
		if(lcdON > 80) Then
			lcdON = 0
			low lcdBacklight
		endif
		
		if(lcdON > 0) Then
			lcdON = lcdON + 1
		endif
		
		if(trackMode == 0) then
            LCDOUT $FE, 1, "Tracking Mode:"
            lcdout $FE,$C0,"Auto Day ",#timeCnt
            if(lcdon != 0) then
                High lcdbacklight
            endif
        endif
        
        if(trackMode == 1) then
            timecnt = 0
            gosub moveNight
        endif
        
        if(trackMode == 2) then
            timecnt = 0
            gosub moveEvening
        endif
        
        timecnt = timecnt + 1
        if((timecnt > (trackupdate * 10)) && (trackMode == 0)) then
            ' Now run the main tracking routine
            gosub track
            timeCnt = 0
        endif
	wend

moveNight:
    while(timeCnt < nightDelay && !sw_scroll && !sw_manauto)
        pause 1000
        lcdout $FE, $C0,"Night:  ", #timeCnt
        timecnt = timecnt + 1
    wend
    ' In case either of these buttons were pressed, 
    if(sw_scroll) then
        gosub menu
        goto moveNight
    endif
    
    if(sw_manauto) then
        gosub mancontrol
        goto moveNight
    endif
    
    gosub moveEast
    trackmode = 0
RETURN
	
moveEvening:
    while(timeCnt < eveningdelay && !sw_scroll && !sw_manauto) 
        pause 1000
        lcdout $FE, $C0,"Evening  ", #timeCnt
        timeCnt = timeCnt + 1
    wend
    ' In case either of these buttons were pressed
    if(sw_scroll) then
        gosub menu
        goto moveEvening
    endif
    
    if(sw_manauto) then
        gosub mancontrol
        goto moveEvening
    endif
    
    high pumpRelay
    pause 200
    PortC = %00000110
    tmp = centerTime * 1000
    Pause tmp
    PortC = %00000100
    Pause 2000
    PortC = %00000000
    trackmode = 1
Return
    
        

menu:
    ' A simple state machine to step through the menus
    menuItem = 0
    if(menuItem == 0) then
        'Display ADC Values
        LCDOUT $FE, 1, "Sensor Value:"
        High lcdbacklight
        lcdon = 1
        while(menuItem == 0)
            ADCIN 0, ledValue
            LCDOUT $FE,$C0, #ledValue
            High lcdbacklight
            pause 100
            if(sw_scroll) then
                while(sw_scroll)
                    ' Debounce the switch
                wend
                menuItem = 1
            endif
        wend
    endif
    
    if(menuItem == 1) then
        ' Adjust the value where the array is pointing at the sun
        ' Higher values offset to the west, lower values offset to the east
        LCDOUT $FE, 1, "Center Position:"
        High lcdbacklight
        lcdon = 1
        read 0, centerVal.byte0
        read 1, centerVal.Byte1
        while(menuItem == 1)
            LCDOUT $FE,$C0, #centerval
            High lcdbacklight
            pause 50
            if(sw_increase) then
                centerval = centerval + 1
            endif
            if(sw_decrease) then
                centerval = centerval - 1
            endif
            if(sw_scroll) then
                while(sw_scroll)
                    ' Debounce the switch
                wend
                menuItem = 2
            endif
        wend
        write 0, centerVal.BYTE0
        WRITE 1, centerVal.BYTE1
    endif
    
    if(menuItem == 2) then
        ' Adjust how long it takes to run the array back to center
        LCDOUT $FE, 1, "Center Time(s):"
        High lcdbacklight
        lcdon = 1
        READ 2, centerTime
        Pause 100
        while(menuItem == 2)
            LCDOUT $FE,$C0, #centerTime
            High lcdbacklight
            pause 50
            if(sw_increase) then
                centertime = centerTime + 1
            endif
            if(sw_decrease) then
                centertime = centerTime - 1
            endif
            if(sw_scroll) then
                while(sw_scroll)
                    ' Debounce the switch
                wend
                menuItem = 3
            endif
        wend
        WRITE 2, centerTime
    endif
            
    if(menuItem == 3) then
        ' Adjust the night delay
        LCDOUT $FE, 1, "Night Delay(s):"
        High lcdbacklight
        lcdon = 1
        read 3, nightDelay.byte0
        read 4, nightDelay.Byte1
        while(menuItem == 3)
            LCDOUT $FE,$C0, #nightDelay
            High lcdbacklight
            pause 50
            if(sw_increase) then
                nightdelay = nightdelay + 1
            endif
            if(sw_decrease) then
                nightdelay = nightdelay - 1
            endif
            if(sw_scroll) then
                while(sw_scroll)
                    ' Debounce the switch
                wend
                menuItem = 4
            endif
        wend
        WRITE 3, nightDelay.byte0
        WRITE 4, nightDelay.Byte1
    endif
    
    if(menuItem == 4) then
        ' Adjust how often we update the position
        LCDOUT $FE, 1, "Update:(s)"
        High lcdbacklight
        lcdon = 1
        read 5, trackUpdate.byte0
        read 6, trackUpdate.Byte1
        while(menuItem == 4)
            LCDOUT $FE,$C0, #trackUpdate
            High lcdbacklight
            pause 50
            if(sw_increase) then
                trackUpdate = trackUpdate + 1
            endif
            if(sw_decrease) then
                trackUpdate = trackUpdate - 1
            endif
            if(sw_scroll) then
                while(sw_scroll)
                    ' Debounce the switch
                wend
                menuItem = 5
            endif
        wend
        WRITE 5, trackUpdate.byte0
        WRITE 6, trackUpdate.Byte1
    endif
    LCDOUT $FE, 1, "Tracking Mode:"
Return
	
track:
	ADCIN 0, ledValue		' Read ADC channel 0 (port A.0, pin 2) 
	
	if((ledValue <= centerVal) && !westlimit) then
        ' We're pressed against the west limit switch, the sun's probably gone down
        trackMode = 2
    else
        If ((ledValue - offset) > centerVal) Then	
        'It needs to be moved to the west
            If((ledValue - centerVal) > MAX_DELTA) Then
                Gosub moveWest
            Endif
        endif
	Endif        
return

' This routine is called by "track" and re-aligns the array with the sun	
moveWest:
	'If we're not already pressed against the limit switch...
	If(westLimit) Then
		'Turn on the pump
		High pumpRelay
		'Wait a bit for it to build up a little pressure
		Pause 200
		'Turn on the solenoid to move the array west
		PortC = %00000101
		Pause 100
		
		While (westLimit && ((ledValue + offset) > centerVal) && (limcnt < 1200) && (!sw_manauto))
			'Update the sensor inputs until we either hit a limit switch or re-align with the sun
            ADCIN 0, ledValue            
			Pause 50
			limcnt = limcnt + 1
		Wend
		
		'Turn off the solenoid
		PortC = %00000100
		Pause 1000
		'Shut down the pump
		PortC = %00000000
	Endif
	limcnt = 0
Return


' This is just for moving the array back to the east at night
moveEast:
    limcnt = 0
	'If we're not already pressed against the limit switch...
	If(eastLimit) Then
		'Turn on the pump
		High pumpRelay
		'Wait a bit for the pump to come up to speed and build up pressure
		Pause 200
		'Turn on the solenoid to move the array east.  Timeout in one minute
		while(eastLimit && (limcnt < 1200))
            PortC = %00000110
            Pause 50
            limcnt = limcnt + 1
        wend
		Pause 50
		'Turn off the solenoid
		PortC = %00000100
		Pause 1000
		'Shut down the pump
		PortC = %00000000
	Endif
Return

manControl:
	'Subroutine for manual control mode.  ADC1 is pulled by on-board resistors to ~2.5v
	'When the control switch is thrown, ADC1 is either pulled up to Vcc or down to Vss
	'This gives us 3 positions for the control switch: move east, move west, and do nothing
	
	'Initialize on-time counter
	pumptime = 0

	while(sw_manauto)
        LCDOUT $FE, 1, "Manual Mode"
        High lcdbacklight
        lcdon = 1
	 
		ADCIN 1, estwstval
		if((estwstval > 900) && westLimit) Then
			'Pin is high, go west
			If(pumptime == 0) Then
				'The pump's off, turn it on
				High pumpRelay
				'Start the on-time counter
				pumptime = 1
				Pause 200
			Endif
			
			while((estwstval > 900) && westLimit)
                LCDOUT $FE,$C0, "Moving West"
				ADCIN 1, estwstval
				'Turn on the west solenoid on
				PortC = %00000101
			wend
			'Turn off the solenoid
			PortC = %00000100
			'Reset pump on-time counter
			pumptime = 1
		Endif
		
		if((estwstval < 100) && eastLimit) Then
			'Pin is low, go east
			If(pumptime == 0) Then
				'The pump's off, turn it on
				High pumpRelay
				'Start the on-time counter
				pumptime = 1
				Pause 200
			Endif
			
			while((estwstval < 100) && eastLimit)
                LCDOUT $FE,$C0, "Moving East"
				ADCIN 1, estwstval
				'Turn on the east solenoid
				PortC = %00000110
			wend
			'Turn off the solenoid
			PortC = %00000100
			'Reset pump on-time counter
			pumptime = 1
		Endif
		
		Pause 50
		
		If(pumptime) Then
			'Increment the pump on-time counter
			pumptime = pumptime + 1
		Endif
		
		If(pumptime > 200) Then 
			'The pump has been running 10 seconds, go ahead and shut it off
			Low pumpRelay
			'Disable the counter
			pumptime = 0
		Endif
	wend
	
	PortC = %00000000
Return
